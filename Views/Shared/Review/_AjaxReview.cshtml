@model MovieRateDirector
@*Only for logged in users!*@
@*Display user's review on the top of reviews*@
@*when it's just posted and later when page loads by the user*@

<div class="col-12 border-bottom-0 user-review">

    @*Reviewer's avatar is displayed on the left side of each review*@
    @if (Model.UserReview.User.ProfilePicture != null)
    {
        <div class="profile-picture-medium-wrapper">
            <div class="profile-picture-medium">
                <img class="nav-profile-picture" src="data:image/*;base64,@(Convert.ToBase64String(Model.UserReview.User.ProfilePicture))">
            </div>
        </div>
    }
    else
    {
        <div class="profile-picture-medium-wrapper">
            <div class="profile-picture-medium">
                <i class="fas fa-user-circle me-0 nav-default-profile-picture fs-2"></i>
            </div>
        </div>
    }
    @*END Reviewer's avatar*@

    @*Start Review's right side*@
    <div class="d-inline-block review-main-col">
        @*Start Review's header*@
        <div class="review-head-wrapper">
            <div class="review-head">
                <div class="review-head-text">
                    Review by
                    <span class="review-name">@Model.UserReview.User.FirstName</span>
                </div>
            </div>
        </div>

        @*Start review text*@
        <div class="review-text-wrapper">
            <div class="review-text">
                <div style="white-space: pre-line;" id="user-existing-review">@Model.UserReview.ReviewText</div>
            </div>
        </div>
        @*End review text*@

        @*Start like section*@
        <div class="review-like-wrapper" id="user-existing-review-stats">
            @*When clicking on this, review will be liked or unliked*@
            <span class="review-like-button" id="review-like-button">
                <input type="hidden" value="@Model.UserReview.Id" class="form-control input-small" id="review-id" />
                @if (Model.UserReview.IsLiked)
                {
                    <span class="review-icon-liked" id="like-icon"></span>
                    <span class="review-liked-text" id="like-caption">Liked</span>
                }
                else
                {
                    <span class="review-icon-like" id="like-icon"></span>
                    <span class="review-like-text" id="like-caption">Like Review</span>
                }
            </span>
            @*End When clicking on this, review will be liked or unliked*@

            @*Start Review like stats*@
            @if (Model.UserReview.LikeCount > 0)
            {
                if (Model.UserReview.LikeCount == 1 && Model.UserReview.IsLiked)
                {
                    @*The only one who like this review is this user*@
                    @*We need to hide the element when user unlikes the review*@
                    <span class="review-like-stats" id="review-stats" style="display: inline-block;"><span id="like-count">@Model.UserReview.LikeCount</span> people liked this review</span>
                }
                else
                {
                    @*Other users liked this review*@
                    @*No need to hide/show for this element*@
                    <span class="review-like-stats" id="review-stats" style="display: inline-block;"><span id="like-count">@Model.UserReview.LikeCount</span> people liked this review</span>
                }
            }
            else
            {
                @*No one liked this review*@
                @*We need to show the element when user likes the review*@
                <span class="review-like-stats" id="review-stats" style="display: none;"><span id="like-count">@Model.UserReview.LikeCount</span> people liked this review</span>
            }

            @*End Review stats*@
        </div>
        @*End like section*@
        @*Edit ... button*@
        <div class="edit-review-textarea-wrapper" id="edit-review-container">

        </div>
        <div class="review-edit-buttons">
            <input type="button" value="Edit" class="review-save-button" id="edit-review" />
        </div>

    </div>
    @*END Review's right side*@

</div>

<script>

    //var controllerActionUrl = "/Movie/Index";
    //Post review - Only available when user is logged in
    //first only append the text area -- then send Model.UserReview.Id
    $(document).on("click", "#edit-review:not('.no-edit')", function (e) {
        var self = $(this);
    var review = $("#user-existing-review").html();
    var data = "reviewText=" + review;
    console.log("Edit started!");
    console.log(data);
    //alert(data);

    $.ajax({

        type: 'POST',
        url: '/Movie/Ferrari3',
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
        data: data,
        success: function (data, result) {
            //alert('Successfully received Data ');
            console.log(result);
            if (data != '') {
                //$("#submitForm").hide();
                $("#edit-review-container").append(data);
                $("#user-existing-review").hide();
                $("#user-existing-review-stats").hide()
                self.addClass("no-edit");
                //scroll to the review
                /*$("html").animate(
                    {
                        scrollTop: $("#user-review-section").offset().top
                    },
                    800 //speed
                );*/
                //notify user
                console.log("Your review is to be edited!");

                //$("#jnotify-message").empty().append("<div>You review of <strong>" + $(".movie-header-title").text() + "</strong> is saved!</div>");
                //$("#clist-add-notify").delay(1400).slideDown(320);
                //$('#clist-add-notify').delay(5000).slideUp(320);
                //end notify user

                //$("#post-review").fadeIn(500);
                //$("#no-review-yet").fadeOut(1000);

            }
        },
        error: function () {
            //alert('Failed to receive the Data');
            console.log('Failed ');
        }
    });

    });


    //Save changes 
    $(document).on("click", "#edit-review.no-edit", function (e) {
        var self = $(this);
        var review = $("#review-text-edit").val();
        var data = "reviewText=" + review;
        console.log("updating!");
        
        

        $.ajax({

            type: 'POST',
            url: '/Movie/UpdateReview',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (data, result) {
                //alert('Successfully received Data ');
                console.log(result);
                if (data != '') {
                    //$("#submitForm").hide();
                    $(".review-ajax-container > #post-review").append(data);

                    //$("#edit-review-container").append(data);
                    //$("#user-existing-review").hide();

                    self.removeClass("no-edit");
                    //remove the textarea
                    $('#review-edit').remove();
                    //scroll to the review
                    /*$("html").animate(
                        {
                            scrollTop: $("#user-review-section").offset().top
                        },
                        800 //speed
                    );*/
                    //notify user
                    console.log("Your review is to be edited!");

                    //$("#jnotify-message").empty().append("<div>You review of <strong>" + $(".movie-header-title").text() + "</strong> is saved!</div>");
                    //$("#clist-add-notify").delay(1400).slideDown(320);
                    //$('#clist-add-notify').delay(5000).slideUp(320);
                    //end notify user

                    //$("#post-review").fadeIn(500);
                    //$("#no-review-yet").fadeOut(1000);

                }
            },
            error: function () {
                //alert('Failed to receive the Data');
                console.log('Failed ');
            }
        });


    });
</script>



