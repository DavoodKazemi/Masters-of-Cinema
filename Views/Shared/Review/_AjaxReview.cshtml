@model MovieRateDirector
@*Only for logged in users!*@
@*This partial view is for displaying the user review on the top of reviews*@
@*Will be rendered: when user opens the movie details view (if he has a reiew of that movie),
    when user just posts a review, and when user clicks save after editing his review*@

<div class="col-12 border-bottom-0 user-review" id="user-review-wrapper">

    @*Reviewer's avatar is displayed on the left side of each review*@
    @if (Model.UserReview.User.ProfilePicture != null)
    {
        <div class="profile-picture-medium-wrapper">
            <div class="profile-picture-medium">
                <img class="nav-profile-picture" src="data:image/*;base64,@(Convert.ToBase64String(Model.UserReview.User.ProfilePicture))">
            </div>
        </div>
    }
    else
    {
        <div class="profile-picture-medium-wrapper">
            <div class="profile-picture-medium">
                <i class="fas fa-user-circle me-0 nav-default-profile-picture fs-2"></i>
            </div>
        </div>
    }
    @*END Reviewer's avatar*@

    @*Start Review's right side*@
    <div class="d-inline-block review-main-col">
        @*Start Review's header*@
        <div class="review-head-wrapper">
            <div class="review-head">
                <div class="review-head-text">
                    Review by
                    <span class="review-name me-2">
                        @Model.UserReview.User.FirstName
                    </span>
                    @if (@Model.UserReview.ReviewerRate != null)
                    {
                        <div class="reviewer-rate-wrapper d-inline-block">

                            @Model.UserReview.ReviewerRate
                            @for (var i = 0; i < Model.UserReview.ReviewerRate; i++)
                            {
                                <span class="starGlowReview" id=""></span>

                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        @*Start review text*@
        <div class="review-text-wrapper">
            <div class="review-text">
                <div class="read-more-object-text" style="white-space: pre-line;" id="user-existing-review">@Model.UserReview.ReviewText</div>
            </div>
        </div>
        @*End review text*@

        @*Start like section*@
    <div class="review-like-wrapper" id="user-existing-review-stats">
        @*When clicking on this, review will be liked or unliked*@
        <span class="review-like-button" id="review-like-button">
            <input type="hidden" value="@Model.UserReview.Id" class="form-control input-small user-existing-review-id" id="review-id" />
            @if (Model.UserReview.IsLiked)
            {
                <span class="review-icon-liked" id="like-icon"></span>
                <span class="review-liked-text" id="like-caption">Liked</span>
            }
            else
            {
                <span class="review-icon-like" id="like-icon"></span>
                <span class="review-like-text" id="like-caption">Like Review</span>
            }
        </span>
        @*End When clicking on this, review will be liked or unliked*@

        <partial name="~/Views/Shared/Review/_LikersUserReview.cshtml" model="Model.UserReview" />
    </div>
        @*End like section*@
        @*Edit ... button*@
        <div class="edit-review-textarea-wrapper" id="edit-review-container">

        </div>
        <div class="review-edit-buttons">
            <input type="button" value="Edit" class="review-save-button" id="edit-review" />
            <input type="button" value="Delete" class="review-delete-button" id="delete-edit-review" />
            <input type="button" value="Cancel" style="display: none;" class="review-cancel-button" id="cancel-edit-review" />
        </div>

    </div>
    @*END Review's right side*@

</div>