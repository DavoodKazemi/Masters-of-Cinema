@model MovieRateDirector
@*Display all existing reviews when page loads - when user IS logged in*@

@foreach (var item in Model.Review)
{
    <div class="col-12 a-review">

        @*Reviewer's avatar is displayed on the left side of each review*@
        @if (item.User.ProfilePicture != null)
        {
            <div class="profile-picture-medium-wrapper">
                <div class="profile-picture-medium">
                    <img class="nav-profile-picture" src="data:image/*;base64,@(Convert.ToBase64String(item.User.ProfilePicture))">
                </div>
            </div>
        }
        else
        {
            <div class="profile-picture-medium-wrapper">
                <div class="profile-picture-medium">
                    <i class="fas fa-user-circle me-0 nav-default-profile-picture fs-2"></i>
                </div>
            </div>
        }
        @*END Reviewer's avatar*@

        @*Start Review's right side*@
        <div class="d-inline-block review-main-col">
            @*Start Review's header*@
            <div class="review-head-wrapper">
                <div class="review-head">
                    <div class="review-head-text">
                        Review by
                        <span class="review-name me-2">
                            @item.User.FirstName
                        </span>
                        @if (@item.ReviewerRate != null)
                        {
                            <div class="reviewer-rate-wrapper d-inline-block">

                                @item.ReviewerRate
                                @for (var i = 0; i < item.ReviewerRate; i++)
                                {
                                    <span class="starGlowReview" id=""></span>

                                }
                            </div>
                        }


                    </div>
                </div>
            </div>

            @*Start review text*@
            <div class="review-text-wrapper">
                <div class="review-text">
                    <div class="read-more-object-text" style="white-space: pre-line;">@item.ReviewText</div>
                </div>
            </div>
            @*End review text*@

            @*Start like section*@
        <div class="review-like-wrapper style-head" style="overflow: hidden;">
            @*When clicking on this, review will be liked or unliked*@
            <span class="review-like-button" id="review-like-button">
                <input type="hidden" value="@item.Id" class="form-control input-small" id="review-id" />
                @if (item.IsLiked)
                {
                    <span class="review-icon-liked" id="like-icon"></span>
                    <span class="review-liked-text" id="like-caption">Liked</span>
                }
                else
                {
                    <span class="review-icon-like" id="like-icon"></span>
                    <span class="review-like-text" id="like-caption">Like Review</span>
                }
            </span>
            @*End When clicking on this, review will be liked or unliked*@

            @*Start Review like stats*@
            <partial name="~/Views/Shared/Review/_LikersReview.cshtml" model="item" />
            @*await Html.PartialAsync("~/Views/Shared/Review/_ReviewLikers.cshtml", item)*@
            @*End Review stats*@

        </div>
            @*End like section*@
        </div>
        @*END Review's right side*@

    </div>
}



<script>
    
</script>